// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  clerkUserId   String    @unique
  email         String    @unique
  name          String?
  imageUrl      String?
  createdtasks  Task[]   @relation("Reporter")
  assignedtasks Task[]  @relation("Assignee")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  activities    Activity[]
  comments      Comment[]
}

model Project {
  id             String   @id @default(cuid())
  name           String
  key            String
  description    String?
  organizationId String    // Clerk organization ID
  sprints        Sprint[]
  task           Task[]
  activities     Activity[]
  comments       Comment[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([organizationId, key]) // Ensure unique project key per organization
}

model Sprint {
  id        String   @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  status    SprintStatus @default(PLANNED)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, name]) // Ensure unique sprint name per project
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  order       Int        // Order within its status column
  priority    TaskPriority @default(MEDIUM)
  assignee    User?      @relation("Assignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  reporter    User       @relation("Reporter", fields: [reporterId], references: [id])
  reporterId  String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  sprint      Sprint?    @relation(fields: [sprintId], references: [id], onDelete: SetNull)
  sprintId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([status, order]) // Index for efficient querying
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Activity {
  id          String    @id @default(cuid())
  type        String
  description String
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@index([projectId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  projectId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
}
